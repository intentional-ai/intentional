name: Tests

on:
  pull_request:
  push:
    branches:
      - main

jobs:

  find-tests:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.value }}
    steps:

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get the affected folders list
        id: folders
        run: |
          git fetch origin main

          if git diff --quiet origin/main HEAD; then
            changed_main_dirs=$(git diff --name-only main...HEAD && git diff --name-only --cached | grep '^intentional' | awk -F'/' '{print $1}' | sort -u | jq -R . | jq -s .)
            changed_plugins_dirs=$(git diff --name-only main...HEAD && git diff --name-only --cached | grep '^plugins/intentional' | awk -F'/' '{print $1"/"$2}' | sort -u | jq -R . | jq -s .)
            changed_dirs=$(jq -n --argjson list1 "$changed_main_dirs" --argjson list2 "$changed_plugins_dirs" '$list1 + $list2')
            echo "value=$changed_dirs" >> $GITHUB_OUTPUT
          else
            changed_dirs="$(cd plugins && ls -d intentional*/ | jq -R -s 'split("\n") | map(select(length > 0))')"
            echo "value=$changed_dirs" >> $GITHUB_OUTPUT
          fi

      - name: "Print affected folders list"
        run: |
          echo "${{ steps.folders.outputs.value }}" | jq

  run-tests:
    needs:
      - find-tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        folder: ${{fromJSON(needs.setup.outputs.folders)}}
        version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.version }}

    - name: Install intentional and ${{ matrix.value }}
      run: |
        pip install uv
        uv pip install --system intentional-core/ intentional/[test] ${{ matrix.value }}[test]

    - name: Run main tests
      run: pytest intentional/

    - name: Run core tests
      run: pytest intentional-core/

    - name: Run tests for ${{ matrix.value }}
      run: pytest ${{ matrix.value }}
